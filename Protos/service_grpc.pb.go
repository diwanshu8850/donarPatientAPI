// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DonarPatientServiceClient is the client API for DonarPatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DonarPatientServiceClient interface {
	CreateUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
	LoginUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
	DeleteUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Success, error)
	GetUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ShowUser, error)
	GetDonars(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RepShow, error)
	GetPatients(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RepShow, error)
	SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error)
	CancelRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error)
	AcceptRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error)
	CancelConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error)
}

type donarPatientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDonarPatientServiceClient(cc grpc.ClientConnInterface) DonarPatientServiceClient {
	return &donarPatientServiceClient{cc}
}

func (c *donarPatientServiceClient) CreateUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) LoginUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) DeleteUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) GetUser(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ShowUser, error) {
	out := new(ShowUser)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) GetDonars(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RepShow, error) {
	out := new(RepShow)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/GetDonars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) GetPatients(ctx context.Context, in *Record, opts ...grpc.CallOption) (*RepShow, error) {
	out := new(RepShow)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/GetPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/SendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) CancelRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/CancelRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) AcceptRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/AcceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donarPatientServiceClient) CancelConnection(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := c.cc.Invoke(ctx, "/Protos.DonarPatientService/CancelConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonarPatientServiceServer is the server API for DonarPatientService service.
// All implementations must embed UnimplementedDonarPatientServiceServer
// for forward compatibility
type DonarPatientServiceServer interface {
	CreateUser(context.Context, *Record) (*Record, error)
	LoginUser(context.Context, *Record) (*Record, error)
	DeleteUser(context.Context, *Record) (*Success, error)
	GetUser(context.Context, *Request) (*ShowUser, error)
	GetDonars(context.Context, *Record) (*RepShow, error)
	GetPatients(context.Context, *Record) (*RepShow, error)
	SendRequest(context.Context, *Request) (*Success, error)
	CancelRequest(context.Context, *Request) (*Success, error)
	AcceptRequest(context.Context, *Request) (*Success, error)
	CancelConnection(context.Context, *Request) (*Success, error)
	mustEmbedUnimplementedDonarPatientServiceServer()
}

// UnimplementedDonarPatientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDonarPatientServiceServer struct {
}

func (UnimplementedDonarPatientServiceServer) CreateUser(context.Context, *Record) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDonarPatientServiceServer) LoginUser(context.Context, *Record) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedDonarPatientServiceServer) DeleteUser(context.Context, *Record) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDonarPatientServiceServer) GetUser(context.Context, *Request) (*ShowUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDonarPatientServiceServer) GetDonars(context.Context, *Record) (*RepShow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonars not implemented")
}
func (UnimplementedDonarPatientServiceServer) GetPatients(context.Context, *Record) (*RepShow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedDonarPatientServiceServer) SendRequest(context.Context, *Request) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedDonarPatientServiceServer) CancelRequest(context.Context, *Request) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRequest not implemented")
}
func (UnimplementedDonarPatientServiceServer) AcceptRequest(context.Context, *Request) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedDonarPatientServiceServer) CancelConnection(context.Context, *Request) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelConnection not implemented")
}
func (UnimplementedDonarPatientServiceServer) mustEmbedUnimplementedDonarPatientServiceServer() {}

// UnsafeDonarPatientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DonarPatientServiceServer will
// result in compilation errors.
type UnsafeDonarPatientServiceServer interface {
	mustEmbedUnimplementedDonarPatientServiceServer()
}

func RegisterDonarPatientServiceServer(s grpc.ServiceRegistrar, srv DonarPatientServiceServer) {
	s.RegisterService(&DonarPatientService_ServiceDesc, srv)
}

func _DonarPatientService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).CreateUser(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).LoginUser(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).DeleteUser(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).GetUser(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_GetDonars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).GetDonars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/GetDonars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).GetDonars(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/GetPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).GetPatients(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).SendRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_CancelRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).CancelRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/CancelRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).CancelRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/AcceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).AcceptRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DonarPatientService_CancelConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonarPatientServiceServer).CancelConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Protos.DonarPatientService/CancelConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonarPatientServiceServer).CancelConnection(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DonarPatientService_ServiceDesc is the grpc.ServiceDesc for DonarPatientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DonarPatientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Protos.DonarPatientService",
	HandlerType: (*DonarPatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DonarPatientService_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _DonarPatientService_LoginUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _DonarPatientService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DonarPatientService_GetUser_Handler,
		},
		{
			MethodName: "GetDonars",
			Handler:    _DonarPatientService_GetDonars_Handler,
		},
		{
			MethodName: "GetPatients",
			Handler:    _DonarPatientService_GetPatients_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _DonarPatientService_SendRequest_Handler,
		},
		{
			MethodName: "CancelRequest",
			Handler:    _DonarPatientService_CancelRequest_Handler,
		},
		{
			MethodName: "AcceptRequest",
			Handler:    _DonarPatientService_AcceptRequest_Handler,
		},
		{
			MethodName: "CancelConnection",
			Handler:    _DonarPatientService_CancelConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Protos/service.proto",
}
